{
  "name": "node-rsa",
  "version": "0.2.23",
  "description": "Node.js RSA library",
  "main": "src/NodeRSA.js",
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/rzcoder/node-rsa.git"
  },
  "keywords": [
    "node",
    "rsa",
    "crypto",
    "assymetric",
    "encryption",
    "decryption",
    "sign",
    "verify",
    "pkcs1",
    "oaep",
    "pss"
  ],
  "author": {
    "name": "rzcoder"
  },
  "license": "BSD",
  "bugs": {
    "url": "https://github.com/rzcoder/node-rsa/issues"
  },
  "homepage": "https://github.com/rzcoder/node-rsa",
  "devDependencies": {
    "grunt": "0.4.5",
    "grunt-simple-mocha": "0.4.0",
    "jit-grunt": "0.9.1",
    "chai": "2.0.0",
    "grunt-contrib-jshint": "0.11.0"
  },
  "dependencies": {
    "lodash": "3.3.0",
    "asn1": "0.2.2"
  },
  "readme": "# Node-RSA\r\n\r\nNode.js RSA library<br/>\r\nBased on jsbn library from Tom Wu http://www-cs-students.stanford.edu/~tjw/jsbn/\r\n\r\n* Pure JavaScript\r\n* No needed OpenSSL\r\n* Generating keys\r\n* Supports long messages for encrypt/decrypt\r\n* Signing and verifying\r\n\r\n## Example\r\n\r\n```javascript\r\nvar NodeRSA = require('node-rsa');\r\nvar key = new NodeRSA({b: 512});\r\n\r\nvar text = 'Hello RSA!';\r\nvar encrypted = key.encrypt(text, 'base64');\r\nconsole.log('encrypted: ', encrypted);\r\nvar decrypted = key.decrypt(encrypted, 'utf8');\r\nconsole.log('decrypted: ', decrypted);\r\n```\r\n\r\n## Installing\r\n\r\n```shell\r\nnpm install node-rsa\r\n```\r\n*Requires nodejs >= 0.10.x or io.js >= 1.x*\r\n\r\n### Testing\r\n\r\n```shell\r\nnpm test\r\n```\r\n\r\n## Work environment\r\n\r\nThis library developed and tested primary for Node.js, but it still can work in browsers with [browserify](http://browserify.org/).\r\n\r\n## Usage\r\n\r\n### Create instance\r\n```javascript\r\nvar NodeRSA = require('node-rsa');\r\n\r\nvar key = new NodeRSA([keyData, [format]], [options]);\r\n```\r\n\r\n* keyData — `{string|buffer|object}` — parameters for generating key or the key in one of supported formats.<br/>\r\n* format — `{string}` — format for importing key. See more details about formats in [Export/Import](#importexport-keys) section.<br/>\r\n* options — `{object}` — additional settings.\r\n\r\n#### Options\r\nYou can specify some options by second/third constructor argument, or over `key.setOptions()` method.\r\n\r\n* environment — working environment (default autodetect):\r\n    * `'browser'` — will run pure js implementation of RSA algorithms.\r\n    * `'node'` for `nodejs >= 0.10.x or io.js >= 1.x` — provide some native methods like sign/verify and encrypt/decrypt.\r\n* encryptionScheme — padding scheme for encrypt/decrypt. Can be `'pkcs1_oaep'` or `'pkcs1'`. Default `'pkcs1_oaep'`.\r\n* signingScheme — scheme used for signing and verifying. Can be `'pkcs1'` or `'pss'` or 'scheme-hash' format string (eg `'pss-sha1'`). Default `'pkcs1-sha256'`, or, if chosen pss: `'pss-sha1'`.\r\n\r\n> *Notice:* This lib supporting next hash algorithms: `'md5'`, `'ripemd160'`, `'sha1'`, `'sha256'`, `'sha512'` in browser and node environment and additional `'md4'`, `'sha'`, `'sha224'`, `'sha384'` in node only.\r\n\r\n<sub>Some [advanced options info](https://github.com/rzcoder/node-rsa/wiki/Advanced-options)</sub>\r\n\r\n#### Creating \"empty\" key\r\n```javascript\r\nvar key = new NodeRSA();\r\n```\r\n\r\n#### Generate new 512bit-length key\r\n```javascript\r\nvar key = new NodeRSA({b: 512});\r\n```\r\n\r\nAlso you can use next method:\r\n\r\n```javascript\r\nkey.generateKeyPair([bits], [exp]);\r\n```\r\n\r\n* bits — `{int}` — key size in bits. 2048 by default.\r\n* exp — `{int}` — public exponent. 65537 by default.\r\n\r\n#### Load key from PEM string\r\n\r\n```javascript\r\nvar key = new NodeRSA('-----BEGIN RSA PRIVATE KEY-----\\n'+\r\n                      'MIIBOQIBAAJAVY6quuzCwyOWzymJ7C4zXjeV/232wt2ZgJZ1kHzjI73wnhQ3WQcL\\n'+\r\n                      'DFCSoi2lPUW8/zspk0qWvPdtp6Jg5Lu7hwIDAQABAkBEws9mQahZ6r1mq2zEm3D/\\n'+\r\n                      'VM9BpV//xtd6p/G+eRCYBT2qshGx42ucdgZCYJptFoW+HEx/jtzWe74yK6jGIkWJ\\n'+\r\n                      'AiEAoNAMsPqwWwTyjDZCo9iKvfIQvd3MWnmtFmjiHoPtjx0CIQCIMypAEEkZuQUi\\n'+\r\n                      'pMoreJrOlLJWdc0bfhzNAJjxsTv/8wIgQG0ZqI3GubBxu9rBOAM5EoA4VNjXVigJ\\n'+\r\n                      'QEEk1jTkp8ECIQCHhsoq90mWM/p9L5cQzLDWkTYoPI49Ji+Iemi2T5MRqwIgQl07\\n'+\r\n                      'Es+KCn25OKXR/FJ5fu6A6A+MptABL3r8SEjlpLc=\\n'+\r\n                      '-----END RSA PRIVATE KEY-----');\r\n```\r\n\r\n### Import/Export keys\r\n```javascript\r\nkey.importKey(keyData, [format]);\r\nkey.exportKey([format]);\r\n```\r\n\r\n* keyData — `{string|buffer}` — key in PEM string **or** Buffer containing PEM string **or** Buffer containing DER encoded data.\r\n* format  — `{string}` — format id for export/import.\r\n\r\n#### Format string syntax\r\nFormat string composed of several parts: `scheme-[key_type]-[output_type]`<br/>\r\n\r\nScheme — NodeRSA supports multiple format schemes for import/export keys:\r\n\r\n  * `'pkcs1'` — public key starts from `'-----BEGIN RSA PUBLIC KEY-----'` header and private key starts from `'-----BEGIN RSA PRIVATE KEY-----' header`\r\n  * `'pkcs8'` — public key starts from `'-----BEGIN PUBLIC KEY-----'` header and private key starts from `'-----BEGIN PRIVATE KEY-----' header`\r\n\r\nKey type — can be `'private'` or `'public'`. Default `'private'`<br/>\r\nOutput type — can be:\r\n\r\n * `'pem'` — Base64 encoded string with header and footer. Used by default.\r\n * `'der'` — Binary encoded key data.\r\n\r\n> *Notice:* For import, if *keyData* is PEM string or buffer containing string, you can do not specify format, but if you provide *keyData* as DER you must specify it in format string.\r\n\r\n**Shortcuts and examples**\r\n * `'private'` or `'pkcs1'` or `'pkcs1-private'` == `'pkcs1-private-pem'` — private key encoded in pcks1 scheme as pem string.\r\n * `'public'` or `'pkcs8-public'` == `'pkcs8-public-pem'` — public key encoded in pcks8 scheme as pem string.\r\n * `'pkcs8'` or `'pkcs8-private'` == `'pkcs8-private-pem'` — private key encoded in pcks8 scheme as pem string.\r\n * `'pkcs1-der'` == `'pkcs1-private-der'` — private key encoded in pcks1 scheme as binary buffer.\r\n * `'pkcs8-public-der'` — public key encoded in pcks8 scheme as binary buffer.\r\n\r\n**Code example**\r\n\r\n```javascript\r\nvar keyData = '-----BEGIN PUBLIC KEY----- ... -----END PUBLIC KEY-----';\r\nkey.importKey(keyData, 'pkcs8');\r\nvar publicDer = key.exportKey('pkcs8-public-der');\r\nvar privateDer = key.exportKey('pkcs1-der');\r\n```\r\n\r\n### Properties\r\n\r\n#### Key testing\r\n```javascript\r\nkey.isPrivate();\r\nkey.isPublic([strict]);\r\n```\r\nstrict — `{boolean}` — if true method will return false if key pair have private exponent. Default `false`.\r\n\r\n```javascript\r\nkey.isEmpty();\r\n```\r\nReturn `true` if key pair doesn't have any data.\r\n\r\n#### Key info\r\n```javascript\r\nkey.getKeySize();\r\n```\r\nReturn key size in bits.\r\n\r\n```javascript\r\nkey.getMaxMessageSize();\r\n```\r\nReturn max data size for encrypt in bytes.\r\n\r\n### Encrypting/decrypting\r\n\r\n```javascript\r\nkey.encrypt(buffer, [encoding], [source_encoding]);\r\nkey.encryptPrivate(buffer, [encoding], [source_encoding]); // use private key for encryption\r\n```\r\nReturn encrypted data.<br/>\r\n\r\n* buffer — `{buffer}` —  data for encrypting, may be string, Buffer, or any object/array. Arrays and objects will encoded to JSON string first.<br/>\r\n* encoding — `{string}` — encoding for output result, may be `'buffer'`, `'binary'`, `'hex'` or `'base64'`. Default `'buffer'`.<br/>\r\n* source_encoding — `{string}` —  source encoding, works only with string buffer. Can take standard Node.js Buffer encodings (hex, utf8, base64, etc). `'utf8'` by default.<br/>\r\n\r\n```javascript\r\nkey.decrypt(buffer, [encoding]);\r\nkey.decryptPublic(buffer, [encoding]); // use public key for decryption\r\n```\r\nReturn decrypted data.<br/>\r\n\r\n* buffer — `{buffer}` — data for decrypting. Takes Buffer object or base64 encoded string.<br/>\r\n* encoding — `{string}` — encoding for result string. Can also take `'buffer'` for raw Buffer object, or `'json'` for automatic JSON.parse result. Default `'buffer'`.\r\n\r\n> *Notice:* `encryptPrivate` and `decryptPublic` using only pkcs1 padding type 1 (not random)\r\n\r\n### Signing/Verifying\r\n```javascript\r\nkey.sign(buffer, [encoding], [source_encoding]);\r\n```\r\nReturn signature for buffer. All the arguments are the same as for `encrypt` method.\r\n\r\n```javascript\r\nkey.verify(buffer, signature, [source_encoding], [signature_encoding])\r\n```\r\nReturn result of check, `true` or `false`.<br/>\r\n\r\n* buffer — `{buffer}` — data for check, same as `encrypt` method.<br/>\r\n* signature — `{string}` — signature for check, result of `sign` method.<br/>\r\n* source_encoding — `{string}` — same as for `encrypt` method.<br/>\r\n* signature_encoding — `{string}` — encoding of given signature. May be `'buffer'`, `'binary'`, `'hex'` or `'base64'`. Default `'buffer'`.\r\n\r\n## Contributing\r\n\r\nQuestions, comments, bug reports, and pull requests are all welcome.\r\n\r\n## Changelog\r\n\r\n### 0.2.22\r\n * `encryptPrivate` and `decryptPublic` now using only pkcs1 (type 1) padding.\r\n\r\n### 0.2.20\r\n * Added `.encryptPrivate()` and `.decryptPublic()` methods.\r\n * Encrypt/decrypt methods in nodejs 0.12.x and io.js using native implementation (> 40x speed boost).\r\n * Fixed some regex issue causing catastrophic backtracking.\r\n\r\n### 0.2.10\r\n * **Methods `.exportPrivate()` and `.exportPublic()` was replaced by `.exportKey([format])`.**\r\n    * By default `.exportKey()` returns private key as `.exportPrivate()`, if you need public key from `.exportPublic()` you must specify format as `'public'` or `'pkcs8-public-pem'`.\r\n * Method `.importKey(key, [format])` now has second argument.\r\n\r\n### 0.2.0\r\n * **`.getPublicPEM()` method was renamed to `.exportPublic()`**\r\n * **`.getPrivatePEM()` method was renamed to `.exportPrivate()`**\r\n * **`.loadFromPEM()` method was renamed to `.importKey()`**\r\n * Added PKCS1_OAEP encrypting/decrypting support.\r\n     * **PKCS1_OAEP now default scheme, you need to specify 'encryptingScheme' option to 'pkcs1' for compatibility with 0.1.x version of NodeRSA.**\r\n * Added PSS signing/verifying support.\r\n * Signing now supports `'md5'`, `'ripemd160'`, `'sha1'`, `'sha256'`, `'sha512'` hash algorithms in both environments\r\n and additional `'md4'`, `'sha'`, `'sha224'`, `'sha384'` for nodejs env.\r\n * **`options.signingAlgorithm` was renamed to `options.signingScheme`**\r\n * Added `encryptingScheme` option.\r\n * Property `key.options` now mark as private. Added `key.setOptions(options)` method.\r\n\r\n\r\n### 0.1.54\r\n * Added support for loading PEM key from Buffer (`fs.readFileSync()` output).\r\n * Added `isEmpty()` method.\r\n\r\n### 0.1.52\r\n * Improve work with not properly trimming PEM strings.\r\n\r\n### 0.1.50\r\n * Implemented native js signing and verifying for browsers.\r\n * `options.signingAlgorithm` now takes only hash-algorithm name.\r\n * Added `.getKeySize()` and `.getMaxMessageSize()` methods.\r\n * `.loadFromPublicPEM` and `.loadFromPrivatePEM` methods marked as private.\r\n\r\n### 0.1.40\r\n * Added signing/verifying.\r\n\r\n### 0.1.30\r\n * Added long message support.\r\n\r\n\r\n## License\r\n\r\nCopyright (c) 2014  rzcoder<br/>\r\nAll Rights Reserved.\r\n\r\nBSD\r\n\r\n## Licensing for code used in rsa.js and jsbn.js\r\n\r\nCopyright (c) 2003-2005  Tom Wu<br/>\r\nAll Rights Reserved.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\nTHE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY\r\nWARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\r\n\r\nIN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,\r\nINDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER\r\nRESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF\r\nTHE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT\r\nOF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\r\n\r\nIn addition, the following condition applies:\r\n\r\nAll redistributions must retain an intact copy of this copyright notice\r\nand disclaimer.\r\n\r\n[![Build Status](https://travis-ci.org/rzcoder/node-rsa.svg?branch=master)](https://travis-ci.org/rzcoder/node-rsa)\r\n",
  "readmeFilename": "README.md",
  "_id": "node-rsa@0.2.23",
  "_shasum": "318704f8daa0e4cddcf09f943baf435a90c1274f",
  "_from": "node-rsa@",
  "_resolved": "https://registry.npmjs.org/node-rsa/-/node-rsa-0.2.23.tgz"
}
